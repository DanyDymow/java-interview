## Command Query Responsibility Segregation
Хорошо подходит для Database per Service паттерна

CQRS (Command Query Responsibility Segregation) — это архитектурный паттерн, который предлагает разделить операции записи и чтения данных в приложении на две отдельные ветки. Вместо того, чтобы использовать единый интерфейс для обеих операций, CQRS предлагает использовать различные модели данных для команд и запросов. Это позволяет оптимизировать каждую модель для конкретных задач и улучшить производительность приложения.

Применение CQRS может быть особенно полезным в системах с большим количеством операций записи или при необходимости распределенной обработки запросов. CQRS также может облегчить сопровождение приложения, так как изменения в одной части системы не будут влиять на другие части.

Несмотря на то, что CQRS может быть сложной архитектурой для начала использования, правильное применение может принести множество преимуществ.

**Принципы CQRS**

Рассмотрим основные принципы.

- 1. Разделение команд и запросов

Одним из главных принципов CQRS является разделение команд (изменение состояния) и запросов (получение состояния) на разные модели. Это позволяет использовать разные подходы к обработке каждого из них и улучшить производительность и масштабируемость приложений.

Команды обычно обрабатываются с помощью синхронных запросов, что позволяет более точно контролировать изменения состояния и обеспечивает более высокую консистентность данных. Запросы, с другой стороны, могут обрабатываться с помощью асинхронных запросов, что позволяет улучшить производительность и масштабируемость приложений.

- 2. Отказ от ORM

В CQRS отказываются от ORM (Object-Relational Mapping) в пользу использования агрегатов (Aggregates), которые представляют связанные сущности в приложении и содержат логику их изменения состояния. Это позволяет улучшить производительность и масштабируемость, так как ORM может стать узким местом при работе с большим объемом данных.

Агрегаты содержат логику изменения состояния, что позволяет более точно контролировать изменения и обеспечивает более высокую консистентность данных. Каждый агрегат может иметь свой собственный жизненный цикл и состояние.

- 3. Асинхронная обработка

CQRS использует асинхронную обработку для улучшения производительности и масштабируемости приложения. Асинхронная обработка позволяет выполнять несколько операций одновременно, что ускоряет обработку запросов и команд.


### Преимущества:

Улучшенная производительность: в проектах с большими объемами данных и высокой нагрузкой на сервера, CQRS позволяет разделить логику команд и запросов на отдельные компоненты, чтобы обработка запросов была более быстрой и эффективной.

Более гибкий дизайн: CQRS предоставляет большую гибкость в дизайне и архитектуре приложений, что позволяет разработчикам создавать более точные и специализированные модели данных, которые лучше соответствуют требованиям конкретного приложения.

Легкость в тестировании: разделение логики команд и запросов позволяет более эффективно тестировать каждый компонент отдельно, что упрощает тестирование и облегчает обнаружение ошибок.

Повышенная отказоустойчивость: CQRS позволяет создавать более отказоустойчивые приложения, благодаря отделению компонентов чтения и записи, что предотвращает сбои в работе всей системы при возникновении проблем с одним из компонентов.

### Недостатки:

Большая сложность: CQRS требует более сложной архитектуры и более высокой квалификации у разработчиков, что может осложнить процесс разработки и поддержки приложений.

Дополнительные затраты: реализация CQRS может потребовать дополнительных затрат на разработку и поддержку, что может повлиять на бюджет проекта.

Не подходит для всех приложений: CQRS может не подходить для всех типов приложений, особенно для тех, которые не имеют сложной логики команд и запросов или для проектов с небольшими объемами данных.

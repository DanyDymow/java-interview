## Аннотация @DataJpaTest , @JdbcTest , @DataMongoTest
является частью Spring Boot Test и используется для тестирования JPA (Java Persistence API) в контексте Spring. Вот основные моменты, которые стоит знать о ней:

- Цель: @DataJpaTest позволяет настраивать и выполнять тесты, связанные с JPA слоем вашего приложения. Она создает минимальный контекст приложения, достаточный для тестирования JPA репозиториев, без необходимости запуска всего приложения.
- Изоляция тестов: @DataJpaTest автоматически сканирует JPA компоненты приложения, такие как репозитории, и создает соответствующий тестовый контекст. Однако она не загружает компоненты, необходимые только для слоев, отличных от JPA (например, контроллеры).
- Внедрение зависимостей: В рамках теста, помеченного @DataJpaTest, вы можете инжектировать репозитории, которые вы хотите протестировать, и использовать их для выполнения операций чтения и записи в базу данных.
- Транзакционность: Тесты, запущенные с помощью @DataJpaTest, обычно выполняются в пределах транзакции, которая автоматически откатывается после завершения теста. Это позволяет изолировать изменения, внесенные тестом, от реальной базы данных.
- Настройки тестового контекста: @DataJpaTest предоставляет различные атрибуты, которые можно использовать для настройки тестового контекста, например, исключение классов, которые необходимо загружать, или подмена компонентов с помощью @MockBean.


Хотя база данных в памяти может быть не лучшим выбором для проверки собственного запроса с использованием собственных функций, вы можете отключить эту автоматическую настройку с помощью:

```java
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
```
и используйте, например, Testcontainers для создания базы данных PostgreSQL для тестирования.

Помимо автоконфигурации, все тесты выполняются внутри транзакции и откатываются после выполнения.

```java
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager;

import static org.assertj.core.api.Assertions.assertThat;

@DataJpaTest
public class UserRepositoryTest {

    @Autowired
    private TestEntityManager entityManager;

    @Autowired
    private UserRepository userRepository;

    @Test
    public void testFindByName() {
        // Создаем и сохраняем сущность в базе данных
        User user = new User("John Doe");
        entityManager.persist(user);
        entityManager.flush();

        // Вызываем метод, который мы хотим протестировать
        User found = userRepository.findByName(user.getName());

        // Проверяем результат
        assertThat(found.getName()).isEqualTo(user.getName());
    }
}
```

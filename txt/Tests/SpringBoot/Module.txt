Что входит в контекст Spring Test: @Controller, @ControllerAdvice, @JsonComponent, Converter, Filter, WebMvcConfigurer

Обычно вы имитируете любой зависимый компонент конечной точки вашего контроллера, используя @MockBean.

```java
@WebMvcTest(ShoppingCartController.class)
class ShoppingCartControllerTest {
 
  @Autowired
  private MockMvc mockMvc;
 
  @MockBean
  private ShoppingCartRepository shoppingCartRepository;
 
  @Test
  public void shouldReturnAllShoppingCarts() throws Exception {
    when(shoppingCartRepository.findAll()).thenReturn(
      List.of(new ShoppingCart("42",
        List.of(new ShoppingCartItem(
          new Item("MacBook", 999.9), 2)
        ))));
 
    this.mockMvc.perform(get("/api/carts"))
      .andExpect(status().isOk())
      .andExpect(jsonPath("$[0].id", Matchers.is("42")))
      .andExpect(jsonPath("$[0].cartItems.length()", Matchers.is(1)))
      .andExpect(jsonPath("$[0].cartItems[0].item.name", Matchers.is("MacBook")))
      .andExpect(jsonPath("$[0].cartItems[0].quantity", Matchers.is(2)));
  }
}
```

@JsonTest, @WebMvcTest, @DataMongoTest, @JdbcTest

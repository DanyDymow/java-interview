## @EventListener

В Spring Boot аннотация @EventListener используется для создания обработчиков событий в приложении. Она позволяет определять методы, которые будут вызываться при наступлении определенных событий в контексте Spring.

Вот ключевые моменты использования аннотации @EventListener в Spring Boot:

### Применение:
- @EventListener можно применять к обычным методам в классах компонентов Spring, таких как @Component, @Service, @Repository, @Controller и т. д.
### События:
- Методы, помеченные @EventListener, вызываются при наступлении определенных событий в контексте Spring, например, контекста приложения, жизненного цикла бина или пользовательских событий.
- События могут быть представлены как объектами, которые определены в Spring Framework, так и пользовательскими событиями, определенными в приложении.
### Параметры метода:
- Методы, помеченные @EventListener, могут принимать аргументы, которые представляют собой событие или объект, связанный с событием.
- Параметры метода могут быть типизированы, чтобы обрабатывать конкретные типы событий.
### Порядок выполнения:
- По умолчанию методы, помеченные @EventListener, вызываются в порядке их объявления в классе.
- При необходимости можно управлять порядком выполнения методов с помощью аннотации @Order или интерфейса Ordered.
### Асинхронное выполнение:
- @EventListener поддерживает асинхронное выполнение методов, что позволяет обрабатывать события в отдельных потоках.
- Для этого можно использовать аннотацию @Async на методах, помеченных @EventListener.


```java
Copy code
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;
import org.springframework.boot.context.event.ApplicationReadyEvent;

@Component
public class MyEventListener {

    @EventListener
    public void onApplicationReady(ApplicationReadyEvent event) {
        // Обработка события ApplicationReadyEvent
        System.out.println("Приложение готово к работе!");
    }
}
```

## IoT
Inversion of Control (IoC) is a fundamental design principle in the Spring Framework, upon which Spring Boot is built. IoC is a concept that shifts the control of object creation and lifecycle management away from the application code to a container or framework. In simpler terms, it's about letting a framework manage the instantiation and configuration of objects, rather than your code doing it explicitly.
Here's how Inversion of Control works in Spring Boot:
### Container 
Spring Boot provides an IoC container known as the Spring IoC container or the Application Context. This container manages the creation and lifecycle of beans (objects) in your application.
### Beans
In Spring Boot, a bean is an object that is managed by the IoC container. These beans are typically Java objects representing various components of your application, such as controllers, services, repositories, and more.
### Configuration: 
Spring Boot relies heavily on Java configuration, XML configuration (although it's less common nowadays), or annotation-based configuration to define beans and their relationships. You can annotate your classes with @Component, @Service, @Repository, or other stereotype annotations to tell Spring Boot that these classes should be managed as beans. 
### Dependency Injection: 
One of the key aspects of IoC is Dependency Injection (DI). Spring Boot injects the required dependencies (other beans) into a bean when it's created, rather than the bean creating its dependencies itself. This promotes loose coupling between components, making your code more maintainable and testable.
```java
@Service
public class ProductService {
    private final ProductRepository repository;

    @Autowired
    public ProductService(ProductRepository repository) {
        this.repository = repository;
    }
}
```
### Lifecycle Management: 
The Spring IoC container manages the entire lifecycle of beans, including their creation, initialization, and disposal (e.g., closing database connections). You can use annotations like @PostConstruct and @PreDestroy to define initialization and destruction methods.
### AOP (Aspect-Oriented Programming): 
Spring Boot also uses IoC principles for aspect-oriented programming. It allows you to define aspects (cross-cutting concerns) separately from your core application logic and apply them selectively to your beans.
### Automatic Wiring: 
Spring Boot can automatically wire dependencies based on various strategies, including by type, by name, or by qualifiers. It simplifies the configuration and reduces the need for explicit wiring.



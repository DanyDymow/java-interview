## архитектурный стиль создания web API

HTTP для взаимодействия клиент-сервер.
XML/JSON в качестве языка форматирования.
Простой URI в качестве адреса для сервисов.
Нестационарная связь.


1. Клиент-серверная архитектура (Client-Server Architecture)
Клиент и сервер должны быть четко разделены. Клиент отвечает за пользовательский интерфейс, а сервер — за хранение данных и обработку запросов. Это позволяет изменять и масштабировать клиентскую и серверную части независимо друг от друга.

2. Отсутствие состояния (Stateless)
Каждый запрос от клиента к серверу должен содержать всю необходимую информацию для обработки запроса. Сервер не должен сохранять состояние между запросами от одного и того же клиента. Это упрощает масштабирование и обработку запросов.

3. Кэшируемость (Cacheable)
Ответы сервера должны быть явно отмечены как кэшируемые или некэшируемые. Кэширование улучшает производительность, уменьшая необходимость повторного запроса одних и тех же данных.

4. Единообразие интерфейса (Uniform Interface)
Единообразие интерфейса упрощает взаимодействие между клиентами и серверами. Это достигается за счет:

Идентификации ресурсов (Resource Identification): Каждый ресурс (данные) идентифицируется уникальным URL.
Манипуляция ресурсами через представления (Resource Manipulation through Representations): Ресурсы манипулируются путем передачи представлений, таких как JSON или XML.
Самоописывающие сообщения (Self-descriptive Messages): Каждое сообщение должно содержать всю необходимую информацию для понимания, например, тип содержимого (Content-Type).
Гипермедиа как движок приложения (HATEOAS - Hypermedia As The Engine Of Application State): Клиент взаимодействует с приложением исключительно через гипермедиа, что позволяет обнаруживать действия и переходы по ссылкам в ответах сервера.
5. Слои (Layered System)
Архитектура может содержать несколько слоев, таких как балансировщики нагрузки, кэш-серверы, прокси-серверы и т.д. Клиенты не должны знать о наличии или отсутствии этих слоев, что позволяет легко добавлять и изменять слои без влияния на взаимодействие между клиентом и сервером.

6. Код по запросу (Code on Demand, опционально)
Сервер может временно расширять или изменять функциональность клиента, отправляя исполняемый код (например, JavaScript). Это опциональный принцип и не обязателен для всех RESTful сервисов.